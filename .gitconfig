#[user]
#	email =
#	name =

[alias]
	co  = checkout
	ci  = commit
	com = commit -m

	st  = status
	s   = status -sb
	ss  = status -sb .

	d   = diff -M
	dc  = diff -M --cached
	du  = diff -M @..@{u}
	dw  = diff --word-diff=color '--word-diff-regex=\\w+|[^[:space:]]' -M
	dcw = diff --word-diff=color '--word-diff-regex=\\w+|[^[:space:]]' -M --cached
	duw = diff --word-diff=color '--word-diff-regex=\\w+|[^[:space:]]' -M @..@{u}

	dule = submodule

	b = branch --sort=version:refname
	ba = branch --sort=version:refname --all

	# usage: git cont REV
	# Show branch containing REV
	cont = branch --sort=version:refname --all --contains
	# Ditto tag
	contt = tag --contains

	su = !git --no-pager diff --name-only --diff-filter=U
	sa = !git --no-pager diff --name-only --diff-filter=A
	sm = !git --no-pager diff --name-only --diff-filter=M
	sd = !git --no-pager diff --name-only --diff-filter=D

	a = add
	# "un-add"
	ua = reset HEAD

	# usage: git fclean PATH
	# Force clean PATH to HEAD state
	fclean = "!f() { set -eu; a=\"${1:-./}\"; echo -n \"Remove untracked and ignored and checkout $a ? [y/N] \" && read -n 1 r && echo && [[ $r == \"y\" ]] && cd \"$GIT_PREFIX\" && ls -d \"$a\" && git checkout @ -- \"$a\" && git clean -xdf -- \"$a\" && echo \"Cleaned $a\"; }; f"

	# usage: git fo BRANCH
	# Fetch any BRANCH to it's upstream
	fo = "!f() { set -eu; git update-ref refs/heads/$1 $1@{upstream}; }; f"

	# usage: git fco BRANCH
	# Fetch any BRANCH to it's upstream, _then_ checkout it
	# (reverse of git co BRANCH; git pull; )
	fco = "!f() { set -eu; git fo $1; git checkout $1 && git submodule update; }; f"

	# Fetch prune all
	fp = fetch --all --prune --tags

	# Pull only if fast forward is possible (abort if conflicts)
	pulf = pull --no-rebase --ff-only

	# Pull rebase with autostash
	pulr = pull --rebase --autostash

	# Push --force-with-lease
	pushf = push --force-with-lease

	# Clean deleted branches
	cleanbranches = !git branch -vv | grep ': gone]' | awk '{ print $1 }' | xargs -n 1 git branch -d

	# Short merge base of HEAD and $1
	mb = "!f() { set -eu; git rev-parse --short $(git merge-base ${1} ${2:-@}); }; f"

	# usage: git magicmerge BRANCH
	# Magic merge
	# -c merge.renamelimit=2048		# increase "follow file rename" limit
	# -X patience					# slower but much smarter merge
	# -X rename-threshold=10		# 2 files with 10% similarities is a rename
	# # -X ignore-space-change		# ignore whitespaces
	# -X ignore-space-at-eol		# ignore whitespaces at eol only
	# --no-ff						# dont fast forward, ie always create a commit
	# --no-commit					# dont "auto" commit after merge
	magicmerge = !git -c merge.renamelimit=2048 merge -X patience -X rename-threshold=10 -X ignore-space-at-eol --no-ff --no-commit

	# Merge fast-forward only
	mf = merge --ff-only
	mff = merge --ff-only

	# Merge non fast-forward (create a commit)
	mnf = merge --no-ff

	# Merge non fast-forward (create a commit), and don't commit
	mnfc = merge --no-ff --no-commit

	# git log note: by default, `git log file` hides commits that make "the end result
	# the same"; --full-history shows everything, and --simplify-merges re-hides
	# only needless merges.

	# Log current branch
	l  = log --pretty=my --graph --full-history --simplify-merges --date-order

	# Log current branch, topologic
	lt = log --pretty=my --graph --full-history --simplify-merges --topo-order

	# Log all
	la = log --pretty=my --graph --full-history --simplify-merges --date-order --all

	# Log all, topologic
	lat = log --pretty=my --graph --full-history --simplify-merges --topo-order --all

	# Log left-right with boundaries
	lb = log --pretty=my --graph --full-history --simplify-merges --date-order --left-right --boundary

	# Log HEAD and its upstream
	lu = "!f() { set -eu; git l --left-right --boundary @...${1:-@\\{upstream\\}}; }; f"

	# Fuller show
	showf = show --format=fuller

	# Show hide untracked files
	hideuntrack = config --local status.showUntrackedFiles no
	showuntrack = config --local status.showUntrackedFiles normal

[format]
	# default pretty format for log/show/whatchanged
	#pretty = my

# Pretty log format
[pretty]
	my = "tformat:%C(magenta)%h%C(reset)%C(auto)% D %C(reset)%s%C(blue)%>|(90) %an %C(bold black)%ar%C(reset)"

[color "branch"]
	current = bold white
	local = bold green
	remote = bold cyan
[color "decorate"]
	HEAD = bold white
	branch = bold green
	remoteBranch = bold cyan
	tag = bold yellow
	stash = bold blue
[color "status"]
	header = bold white
	added = bold green
	changed = bold blue
	untracked = red
	unmerged = bold red
	branch = bold green
	localBranch = bold green
	remoteBranch = bold cyan

[color]
	branch = auto
	diff = auto
	interactive = auto
	status = auto
	log = auto
	ui = auto
	grep = auto

#[column]
#	ui = auto column dense

[core]
	pager = less
[pager]
	# If $LESS exists, git will use it instead of the default "less -FRX"
	# So here, restore "FRX" only for those commands.
	# -F : --quit-if-one-screen
	# -R : --RAW-CONTROL-CHARS: allow ANSI "color" escape sequences
	# -X : --no-init : no termcap clear on quit
	tag = "less -FRX"
	branch = "less -FRX"

[tag]
	sort = version:refname
[fetch]
	prune = true
[pull]
	rebase = true
[push]
	default = simple
[merge]
	conflictstyle = diff3
[core]
	# Increase short hash to 10 characters
	abbrev = 10
[diff]
	indentHeuristic = true
	#algorithm = myers # default
	#algorithm = minimal
	#algorithm = patience
	#algorithm = histogram

[core]
	# default:
	#whitespace = blank-at-eol,blank-at-eof,space-before-tab
	whitespace = blank-at-eol,blank-at-eof,space-before-tab,cr-at-eol

	# checkout crlf, commit lf
	#autocrlf = true
	# checkout as is, commit lf
	#autocrlf = input
	# checkout as is, commit as is
	autocrlf = false

[merge]
	tool = meld

[mergetool "emerge"]
	path = /home/jo/bin/emerge-for-git

### WINDOWS ###
#[core]
#	autocrlf = true
#	editor = \"C:/Program Files (x86)/emacs-24.3/bin/emacs.exe\"
#	eol = crlf
#[difftool "meld"]
#	cmd = '/c/Program Files (x86)/Meld/meld/meld.exe' \"$LOCAL\" \"$REMOTE\"

[include]
	path = ~/.gitconfig.local
