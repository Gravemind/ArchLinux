#!/bin/bash

set -euo pipefail

prog="$(basename "$0")"

if [[ "${1:--h}" == "-h" ]]
then
    echo "
usage: $prog src_file.rrd clamp_max_value [replace_by_string]

  replace_by_string default is clamp_max_value

Example: clamp values to 10 maximum
  $> sudo $prog /var/lib/collectd/rrd/$HOSTNAME/ping/ping-8.8.8.8.rrd 10

Example: remove values greater than 10 (replace by NaN)
  $> sudo $prog /var/lib/collectd/rrd/$HOSTNAME/ping/ping-8.8.8.8.rrd 10 NaN

Negative clamp_max_value will affect values lower than clamp_max_value

"
    exit 1
fi

if [[ "${1:-}" == "-d" ]]
then
    set -x
    shift
fi

src="$1"
maxvalue="$2"
newvalue="${3:-$2}"

if [[ "$newvalue" != "NaN" ]]
then
    newvalue="$(printf %e "$newvalue")"
fi

if [[ $maxvalue -lt 0 ]]
then
    cmpop="<"
else
    cmpop=">"
fi

echo "Looking for values $cmpop $maxvalue in $src ..."

tmpfile="$(mktemp --tmpdir rrdtool_clamp.XXXXXXXX)"
trap 'rm -f $tmpfile' EXIT
rrdtool dump "$src" > "$tmpfile"


echo

valuereg='<v>([-+]?[0-9]+.*?)<\/v>'

perl -ne '
BEGIN {
    $vnew = "'"$newvalue"'";
    $vmax = '"$maxvalue"';
}
END {
    printf "Found %d values\n", $t;
    printf "  to be unchanged : %7g,%5.1f%%, average: %g\n", $lc, (100 * $lc / $t), ($lc == 0 ? "-" : $lv / $lc);
    printf "  to be replaced  : %7g,%5.1f%%, average: %g\n", $gc, (100 * $gc / $t), ($gc == 0 ? "-" : $gv / $gc);
    printf "Would replace by %s\n", $vnew;
}
s/'"$valuereg"'/
    $t += 1;
    if ($1 '"$cmpop"' $vmax) {
      $gv+=$1 ; $gc += 1;
    } else {
      $lv+=$1 ; $lc += 1;
    }
/ge
' "$tmpfile"

echo
echo -n "Replace them [y/N] ?"
read -n 1 resp
echo
if [[ "x$resp" != "xy" ]]
then
    echo "Aborting."
    exit 1
fi

backup="${src}.backup"
echo
echo "Backing up to $backup"
cp "$src" "$backup"
echo

echo "Replacing..."
rm -f "$src"

perl -i -pe '
BEGIN {
    $vnew = "'"$newvalue"'";
    $vmax = '"$maxvalue"';
}
s/'"$valuereg"'/
    if ($1 '"$cmpop"' $vmax) {
      "<v>".$vnew."<\/v>"
    } else {
      "<v>".$1."<\/v>"
    }
/ge
' "$tmpfile"

rrdtool restore "$tmpfile" "$src"

echo "Checking..."

r=0
rrdtool info "$src" > /dev/null || r=$?
if [[ "$r" -ne 0 ]]
then
    echo "Something went wrong, restoring backup"
    cp "$backup" "$src"
    exit 1
fi

echo "Done. removing backup."
rm -f "$backup"
