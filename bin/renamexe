#!/bin/bash

set -euo pipefail
#set -x

basename0="$(basename "$0")"

usage() {
    echo 'usage: '"$basename0"' COMMAND... -- FILE...

Rename FILEs using COMMAND to generate new names. COMMAND receives the current
filename in STDIN, and the new filename is read from STDOUT.

'"$basename0"' shows word diffs, and ask before moving files. Also generates a
"revert" script.

Examples:

    # for all "foo_*.txt" files, replace all "_" by "-" in filenames
    $> '"$basename0"' sed '\''s/_/-/g'\'' -- foo_*.txt

    # for all files, add 42 to all numbers in filenames, and zero-left-pad them to 4 characters
    $> '"$basename0"' perl -pe '\''s/[0-9]+/sprintf("%04d", $& + 42)/eg'\'' -- *
'
}

# Words are non-whitespace:
#git_word_diff=
# Words are [a-zA-Z0-9]+, fallback char-by-char:
git_word_diff='--word-diff-regex=[a-zA-Z0-9]+|[^[:space:]]'
# Char-by-char diff:
#git_word_diff='--word-diff-regex=.'

# Show word diffs with color only (won't see whitespace diff):
git_word_diff_color=--word-diff=color
# Show word diff with color and text delimiters:
#git_word_diff_color=--word-diff=plain"

tmpdir="$(mktemp -d -t "$basename0.XXXXXXXX")"
cleanup() { rm -rf "$tmpdir"; }
trap cleanup EXIT

pretty_string_wdiff() {
    echo "$1" > "$tmpdir/diffa"
    echo "$2" > "$tmpdir/diffb"
    { git diff --no-index --color=always $git_word_diff_color $git_word_diff -- "$tmpdir/diffa" "$tmpdir/diffb" || true ; } | tail -n+6 | sponge
}

if [[ "${1:-}" == "-h" || "${1:-}" == '--help' ]]
then
    usage
    exit 0
fi

cmd=()
files=()

while [[ "$#" -gt 0 ]]
do
    if [[ "$1" == "--" ]]
    then
        shift
        break
    fi
    cmd+=( "$1" )
    shift
done

files=( "$@" )

if [[ "${#cmd[@]}" -le 0 || "${#files[@]}" -le 0 ]]
then
    echo "$basename0: error: missing arguments" >&2
    usage
    exit 1
fi

srcs=()
dsts=()

revert="/tmp/${basename0}_revert_$(date --iso-8601=seconds).sh"
touch "$revert"
chmod +x "$revert"
echo "#!/bin/bash" >> "$revert"
echo "set -x" >> "$revert"
printf "cd %q || exit 1\n" "$(pwd)" >> "$revert"

for file in "${files[@]}"
do
    if [[ ! -e "$file" ]]
    then
        echo "$basename0: no such file or directory: $file"
        exit 1
    fi
    newfile="$(echo "$file" | "${cmd[@]}")"

    if [[ "$file" = "$newfile" ]]
    then
       continue
    fi

    srcs+=( "$file" )
    dsts+=( "$newfile" )

    pretty_string_wdiff "$file" "$newfile"

    printf "mv %q %q\n" "$newfile" "$file" >> "$revert"

done

if [[ "${#srcs[@]}" -eq 0 ]]
then
    echo "No file name changed !"
    exit 1
fi

echo -n "execute rename ? [y]/[n] "
read -r -n1 r || true
echo
if [[ "$r" = "y" ]]
then
    echo "(note: revert script generated: $revert)"
    for ((i = 0; i < ${#srcs[@]}; i++))
    do
        (set -x; mv "${srcs[i]}" "${dsts[i]}")
    done
    echo "(note: revert script generated: $revert)"
else
    echo "aborted"
    rm "$revert"
fi
