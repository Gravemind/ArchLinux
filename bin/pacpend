#!/usr/bin/env python3

import sys
import itertools
import re
import argparse
import time
import os
import subprocess
import unittest
from operator import itemgetter, attrgetter

# https://git.archlinux.org/pyalpm.git/
# pacman -S pyalpm
import pyalpm
import pycman.config

import pprint
pp = pprint.PrettyPrinter(indent=4).pprint

COLORS={ 'red'      : "\033[31m",
         'green'    : "\033[32m",
         'yellow'   : "\033[33m",
         'blue'     : "\033[34m",
         'mag'      : "\033[35m",
         'cyan'     : "\033[36m",
         'white'    : "\033[37m",
         'bold'     : "\033[1m",
         'underline': "\033[4m",
         'reset'    : "\033[0m" }
def col_never(*cs):  return ''
def col_always(*cs): return "".join([COLORS[c] for c in cs])
global col
col = col_never
def init_col_when(when):
    if when == 'auto':
        usecolor=sys.stdout.isatty()
    else:
        usecolor=(when == 'always')
    global col
    col = col_always if usecolor else col_never

## https://stackoverflow.com/questions/14889454/printed-length-of-a-string-in-python
strip_ANSI_pat = re.compile(r"""
    \x1b     # literal ESC
    \[       # literal [
    [;\d]*   # zero or more digits or semicolons
    [A-Za-z] # a letter
    """, re.VERBOSE).sub
def strip_ANSI(s):
    return strip_ANSI_pat("", s)

def seconds_to_human(s):
    a = [(31556736, 'Y', 'year', '-'),
         #(2630016, 'M', 'month'),
         (2629746, 'M', 'month', '-'),
         #(2592000, 'M', 'month'),
         (86400, 'd', 'day', ' '),
         (3600, 'h', 'hour', ':'),
         (60, 'm', 'min', ':'),
         (1, 's', 'sec', '')]
    r = []
    for d in a:
        if s >= d[0]:
            f = (s / d[0])
            #return str(round(f, 1)) + ' ' + d[2] + 's'
            return str(round(f, 1)) + d[1]
    return 'now'

starts_with_epoch_re_search = re.compile("^\d+:").search
ends_with_pkgrel_re_search = re.compile("-\d+$").search
version_comp_re = re.compile("[0-9a-zA-Z+]+");

def versions_components_normalized(a, b):
    ca = [ (m.start(), m.group()) for m in version_comp_re.finditer(a) ]
    cb = [ (m.start(), m.group()) for m in version_comp_re.finditer(b) ]
    assert len(ca) > 0
    assert len(cb) > 0
    # fix epoch changes
    epocha = (starts_with_epoch_re_search(a) != None)
    epochb = (starts_with_epoch_re_search(b) != None)
    if epocha != epochb:
        if not epocha: ca = [(0, "0")] + ca
        else:          cb = [(0, "0")] + cb
    elif epocha and epochb and ca[0][1] == cb[0][1]: # remove epoch if same
        ca = ca[1:]
        cb = cb[1:]
    # fix pkrel changes
    pkgrela = (ends_with_pkgrel_re_search(a) != None)
    if pkgrela != (ends_with_pkgrel_re_search(b) != None):
        if not pkgrela: ca.append((len(a), "0"))
        else:           cb.append((len(b), "0"))
    ## padd before pkgrel to equal size
    def paddb(ca, cb):
        return cb[:-1] + [ (cb[-1][0], "0") for _ in range(len(ca) - len(cb)) ] + cb[-1:]
    if len(ca) > len(cb):
        cb = paddb(ca, cb)
    elif len(ca) < len(cb):
        ca = paddb(cb, ca)
    return ca, cb

# cd bin/; ln -sf pacpend pacpend.py; python -m unittest -v pacpend.py
class TestVersions(unittest.TestCase):
    def test_versions_components_normalized(self):
        self.assertEqual(versions_components_normalized("1.2", "1.2"),
                         ([ (0, "1"), (2, "2") ], [ (0, "1"), (2, "2") ]))
        self.assertEqual(versions_components_normalized("1.2.3.4", "2:2-2"),
                         ([(0, "0"), (0, "1"), (2, "2"), (4, "3"), (6, "4"), (7, "0")],
                          [(0, "2"), (2, "2"), (4, "0"), (4, "0"), (4, "0"), (4, "2")]))

def find_version_diff(a, b):
    for ab in zip(*versions_components_normalized(a, b)):
        if ab[0][1] != ab[1][1]:
            return (ab[0][0], ab[1][0])
    return (len(a), len(b))

def version_diff_sort_key(a, b):
    af, bf = versions_components_normalized(a, b)
    scorei = -1
    scores = []
    for i, ab in enumerate(zip(af, bf)):
        ac, bc = ab[0][1], ab[1][1]
        if scorei == -1 and ac != ab:
            scorei = i
        if scorei != -1:
            # to compare 1.1.2->1.2.0 and 1.1.2->1.2.1 we need to compute score to the end
            if ac.isnumeric() and bc.isnumeric() and int(bc) > 0:
                scores.append((int(bc) - int(ac)) / int(bc))
            else:
                scores.append(0.9) # arbitrary
    total = len(bf)
    key = [ (total - scorei) / total ] + scores
    #pp([a, af, bf, key])
    return key

# https://stackoverflow.com/questions/8526675/python-argparse-optional-append-argument-with-choices#8527629
class SortChoiceListAction(argparse.Action):
    SORT_KEYS = [
        ('name'    , 'package name'),
        ('groups'  , 'package groups'),
        ('db'      , 'package sync database name'),
        ('explicit', 'package explicitly installed or not'),
        ('old'     , 'old package build date'),
        ('vdiff'   , 'difference between old version and new one'),
        ('sizediff', 'difference between old installed size and new one'),
    ]
    DEFAULT = ['name', 'vdiff']
    CHOICES = list(map(itemgetter(0), SORT_KEYS))
    def __call__(self, parser, namespace, values, option_string=None):
        if values:
            values = values.split(",")
            for value in values:
                value, _ = SortChoiceListAction.parsekeyrev(value)
                if value not in self.CHOICES:
                    message = ("invalid choice: {0!r} (choose from {1})"
                               .format(value,
                                       ', '.join([repr(action)
                                                  for action in self.CHOICES])))

                    raise argparse.ArgumentError(self, message)
            setattr(namespace, self.dest, values)

    def parsekeyrev(key):
        if key.endswith("-"):
            return key[:-1], True
        return key, False

    def sortkeyshelp(ident):
        m = max([ len(s[0]) for s in SortChoiceListAction.SORT_KEYS ])
        return "\n".join([ '{}{:<{}} : {}'.format(ident, s[0], m, s[1]) for s in SortChoiceListAction.SORT_KEYS])

def make_parser():
    parser = argparse.ArgumentParser(
        description=r"""Prettier `pacman -Qu`, using `checkupdates` database by default.

Tries to use same temporary database as `checkupdates`'s by default.
Here is how the database gets picked:
  - `-b ''` -> pacman's default (from /etc/pacman.conf)
  - `-b <path>` -> path
  - non-empty $CHECKUPDATES_DB -> $CHECKUPDATES_DB
  - same default dbpath as `checkupdates`'s

examples:
  - Simply checking for updates:
  $> checkupdates > /dev/null && %(prog)s

  - Check and download updates, using non-root and safe dbpath:
  # Setup once as root: (so users can download, should be safe, else use --cachedir)
    #> sudo chmod a+w /var/cache/pacman/pkg
  # Check and download as user:
    $> checkupdates > /dev/null; %(prog)s; echo ":: Downloading only:";\
         fakeroot -- pacman --noconfirm -Suwb "${TMPDIR:-/tmp}/checkup-db-${USER}/"

""",
        epilog=r"""
sort keys:
{sortkeys}

""".format(sortkeys=SortChoiceListAction.sortkeyshelp("  ")),
        formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('--iec',
        action = 'store_true', default = False,
        help = 'display IEC sizes (MiB), instead of SI (MB).\n(default: %(default)s)')
    parser.add_argument('--old', metavar="<months>",
        type=int, default = 8,
        help = 'threshold in months to colorize old packages.\n(default: %(default)s)')
    parser.add_argument('--color', metavar="<when>",
        choices=['never', 'always', 'auto'], default='auto',
        help = 'when to use colors.\n(default: %(default)s)')

    filtering = parser.add_argument_group('filter')
    filtering.add_argument('-e', '--explicit',
        action = 'store_true', default = False,
        help = 'list only explicitly installed pakages.\n(default: %(default)s)')

    ordering = parser.add_argument_group('sort and group')
    ordering.add_argument('-g', '--group-by', metavar = '<groupby>',
        dest='groupby',
        choices = ['none', 'groups', 'db', 'dbngroups', 'explicit'], default = 'groups',
        help = 'group packages by %(choices)s.\n(default: %(default)s)')
    ordering.add_argument('-s', '--sort-by', metavar = '<key,...>',
        dest='sortkeys',
        action = SortChoiceListAction, default = SortChoiceListAction.DEFAULT,
        help = 'ordered sort key list.\nsee sort keys section.\n"-" suffix to reverse: name-,vdiff-\n(default: '+','.join(SortChoiceListAction.DEFAULT)+')')

    # partial pyalpm/pycman/config.py make_parser()
    common = parser.add_argument_group('pacman')
    common.add_argument('-b', '--dbpath', metavar = '<path>',
            action = 'store', dest = 'dbpath', type = str,
            help = 'set an alternate database location.\nempty path to force pacman\'s default.')
    common.add_argument('--config', metavar = '<file>',
            action = 'store', dest = 'config', type = str,
            help = 'set an alternate configuration file')
    #common.add_argument('--cachedir', metavar = '<dir>',
    #       action = 'store', dest = 'cachedir', type = str,
    #       help = 'set an alternate cche location')

    return parser

def getor(self, k, d):
    return self[k] if k < len(self) else d

class Grouped:
    def __init__(self, title):
        self.title = title
        self.pkgs = []
        self.hasexplicit = False

class NamespaceDef():
    def __getattr__(self, name):
        return None

def main(rawargs):

    parser = make_parser()
    args = parser.parse_args(rawargs)
    args_old_sec = args.old * 2629746

    init_col_when(args.color)
    col_vers_old=col('blue')
    col_vers_d=col('bold', 'blue')
    col_vers_new=col('cyan')
    col_vers_w=col('bold', 'cyan')
    col_db=col('bold', 'mag')
    col_old=col('bold', 'cyan')
    col_explicit=col('bold', 'white')
    col_reset=col('reset')

    # Pacman config file
    if args.config is None:
        args.config = "/etc/pacman.conf"
    pacman_config = pycman.config.PacmanConfig(conf=args.config)

    # Resolve pacman db path
    if args.dbpath == '':
        args.dbpath = pacman_config.options["DBPath"]
    elif args.dbpath is None:
        args.dbpath = os.environ.get('CHECKUPDATES_DB', '')
        if args.dbpath == '':
            # /usr/bin/checkupdates
            # CHECKUPDATES_DB="${TMPDIR:-/tmp}/checkup-db-${USER}/"
            args.dbpath = os.environ.get('TMPDIR', '/tmp') + '/checkup-db-' + os.environ.get('USER', '') + '/'
        if not os.path.exists(args.dbpath + '/local'):
            sys.stderr.write(col('bold', 'red')+'Did you run checkupdates ? dbpath does not exists: {}\n'.format(args.dbpath)+col('reset'))
            return 1
    pacman_args = NamespaceDef()
    pacman_args.dbpath = args.dbpath
    pacman_args.config = args.config
    #pacman_args.cachedir = args.cachedir
    pacman_config.load_from_options(pacman_args)

    # Load pacman db
    pacman_handle = pacman_config.initialize_alpm()
    localdb = pacman_handle.get_localdb()
    pkglist = localdb.pkgcache
    # @TODO: filter pkglist from stdin or args
    # @TODO: aur pkgs ?

    db_order = { db.name: str(i).rjust(3, "0") for i, db in enumerate(pacman_handle.get_syncdbs()) }
    pkgs_grouped = dict()
    for pkg in pkglist:
        if args.explicit and pkg.reason != pyalpm.PKG_REASON_EXPLICIT:
            continue
        pkgu = pyalpm.sync_newversion(pkg, pacman_handle.get_syncdbs())
        #pkgu = pkg
        if pkgu is None:
            continue
        groupedtitle = ''
        groupedkey = ''
        if args.groupby == 'groups':
            groupedtitle = " ".join(pkgu.groups)
            groupedkey = " ".join(pkgu.groups) if len(pkgu.groups) > 0 else "~"
        elif args.groupby == 'db':
            groupedtitle = pkgu.db.name
            groupedkey = db_order[pkgu.db.name]
        elif args.groupby == 'dbngroups':
            groupedtitle = " ".join([pkgu.db.name] + pkgu.groups)
            groupedkey = db_order[pkgu.db.name] + (" ".join(pkgu.groups) if len(pkgu.groups) > 0 else "~")
        elif args.groupby == 'explicit':
            if pkg.reason == pyalpm.PKG_REASON_EXPLICIT:
                reason = 'explicitly installed'
            elif pkg.reason == pyalpm.PKG_REASON_DEPEND:
                reason = 'installed as dependency'
            else:
                reason = 'N/A'
            groupedtitle = reason
            groupedkey = pkg.reason
        grouped = pkgs_grouped.setdefault(groupedkey, Grouped(groupedtitle))
        grouped.pkgs.append((pkg, pkgu))
        if pkg.reason == pyalpm.PKG_REASON_EXPLICIT:
            grouped.hasexplicit = True

    if len(pkgs_grouped) == 0:
        return 1

    def format_size(size, force=False, iec=False):
        size = int(size)
        if iec:
            s = size / 1048576
            u = "MiB"
        else:
            s = size / 1000000
            u = "MB"
        s = round(s, 1)
        if not force and s == 0:
            return ""
        return "{:+}{}".format(s, u)

    now = int(time.time())
    total_sizediff = 0
    total_pkgs = 0
    outtable = []
    for k, grouped in sorted(pkgs_grouped.items(), key=itemgetter(0)):
        ident = ""
        if len(grouped.title) > 0:
            ident = "  "
            g = ""
            if grouped.hasexplicit:
                g += col_explicit + grouped.title + ":" + col_reset
            else:
                g += grouped.title+":"
            outtable.append(g)

        pkgsorted = grouped.pkgs
        for sortkey in args.sortkeys:
            sortkey, rev = SortChoiceListAction.parsekeyrev(sortkey)
            if sortkey == 'name':
                pkgsorted.sort(key=lambda p: p[1].name, reverse=rev)
            elif sortkey == 'groups':
                pkgsorted.sort(key=lambda p: " ".join(p[1].groups) if len(p[1].groups) > 0 else "~", reverse=rev)
            elif sortkey == 'db':
                pkgsorted.sort(key=lambda p: p[1].db.name, reverse=rev)
            elif sortkey == 'explicit':
                pkgsorted.sort(key=lambda p: p[0].reason == pyalpm.PKG_REASON_EXPLICIT, reverse=not rev)
            elif sortkey == 'old':
                pkgsorted.sort(key=lambda p: p[0].builddate, reverse=rev)
            elif sortkey == 'vdiff':
                pkgsorted.sort(key=lambda p: version_diff_sort_key(p[0].version, p[1].version), reverse=not rev)
            elif sortkey == 'sizediff':
                pkgsorted.sort(key=lambda p: p[1].isize - p[0].isize, reverse=not rev)

        for pkg, pkgu in pkgsorted:
            name = pkgu.name
            if pkg.reason == pyalpm.PKG_REASON_EXPLICIT:
                name = col_explicit + name + col_reset
            oldver = pkg.version
            newver = pkgu.version
            oldveri, newveri = find_version_diff(oldver, newver)
            oldvercolor = col_vers_old + oldver[:oldveri] + col_vers_d + oldver[oldveri:] + col_reset
            newvercolor = col_vers_new + newver[:newveri] + col_vers_w + newver[newveri:] + col_reset
            sizediff = format_size(pkgu.isize - pkg.isize, iec=args.iec);
            total_sizediff += pkgu.isize - pkg.isize;
            total_pkgs += 1
            olddate = seconds_to_human(now - pkg.builddate)
            if now - pkg.builddate > args_old_sec:
                olddate = col_old + olddate + col_reset

            p = []
            p.append(ident + col_db + pkgu.db.name + col_reset)
            p.append(name)
            p.append(oldvercolor)
            #p.append("->")
            p.append(newvercolor)
            p.append(olddate)
            p.append(sizediff)
            if len(pkgu.groups) > 0:
                p.append("(" + " ".join(pkgu.groups) + ")")
            else:
                p.append('')
            #p.append('https://www.archlinux.org/packages/'+pkgu.db.name+'/'+pkgu.arch+'/'+pkgu.name+'/')
            #p.append(pkgu.url)

            outtable.append(p)

    t = "total: {} packages, {}".format(total_pkgs, format_size(total_sizediff, force=True, iec=args.iec))
    if args.dbpath is not None:
        t += ' (db: '+args.dbpath+')'
    outtable.append(t)

    outtable_lengths = [ [ len(strip_ANSI(c)) for c in r ] for r in outtable ]

    # Merge name and oldver
    namecoli = 1
    nameverw = 0
    for i in range(len(outtable_lengths)):
        around = range(max(i - 1, 0), min(i + 2, len(outtable_lengths)))
        ml = max([ getor(outtable_lengths[j], namecoli, 0) for j in around ])
        mr = max([ getor(outtable_lengths[j], namecoli + 1, 0) for j in around ])
        nameverw = max(nameverw, ml + mr)
    nameverw += 1
    for i in range(len(outtable_lengths)):
        if not isinstance(outtable[i], str):
            l = outtable_lengths[i][namecoli] + outtable_lengths[i][namecoli + 1]
            outtable[i][namecoli] += (nameverw - l) * ' ' + outtable[i][namecoli + 1]
            del outtable[i][namecoli + 1]
            del outtable_lengths[i][namecoli + 1]

    # Print table
    def format_cell(cell, w):
        if w == 0:
            return ""
        striped = strip_ANSI(cell)
        if striped[0:1].isnumeric() or ((striped[0:1] == "+" or striped[0:1] == "-") and striped[1:2].isnumeric()):
            return "{:>{}}".format(cell, w+len(cell)-len(striped))
        else:
            return "{:{}}".format(cell, w+len(cell)-len(striped))

    print('')
    tablews = [ max(col) for col in itertools.zip_longest(*outtable_lengths, fillvalue=0) ]
    for row in outtable:
        if isinstance(row, str):
            print(row)
        else:
            print(" ".join(format_cell(cell, tablews[i]) for i, cell in enumerate(row)))
    print('')

    return 0

if __name__ == "__main__":
    ret = main(sys.argv[1:])
    sys.exit(ret)
