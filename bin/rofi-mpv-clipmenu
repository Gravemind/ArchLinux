#!/bin/bash

set -u

shopt -s lastpipe

default_dl_dir="$(xdg-user-dir DOWNLOAD)"

base0="$(basename "$0")"

usage() {
    echo -n 'usage: '"$base0"' [OPTS...] [--] [ARGS...]

    Asks before running `mpv ARGS... -- $(xclip -o)`.

OPTS...:

    -h|--help
        print this message

    --rofi-args ARGS...
        pass ARGS to rofi

    --dl-dir DL_DIR
        download location directory (default: '"$default_dl_dir"')

Environment variables:
* CLIPMENU overrides the clipmenu program

Tip to make mpv open a window ASAP for http/https/ytdl streams: add to your mpv config:
```
[protocol.http]
force-window=immediate
[protocol.https]
profile=protocol.http
[protocol.ytdl]
profile=protocol.http
```

'
}

filter_urls() {
    grep -E '^[A-Za-z0-9]+://'
}

escape_markup() {
    e="$(cat)"
    e="${e//&/&amp;}"
    e="${e//</&lt;}"
    e="${e//>/&gt;}"
    echo -n "$e"
}

sanitize_filename() {
    sed -E 's/[^a-zA-Z0-9\+\,\-\.\:]+/_/g'
}

LOGPID=$$

log() {
    echo "$base0 $LOGPID: $*" 1>&2
}
err() {
    echo "$base0 $LOGPID: error: $*" 1>&2
}
fatal() {
    echo "$base0 $LOGPID: fatal error: $*" 1>&2
    exit 2
}
checked() {
    "$@"
    r=$?
    [[ $r = 0 ]] || fatal "$0 failed (exit $r)"
}

notify() {
    checked notify-send -a "$base0" -h "string:synchronous:$base0-$LOGPID" -u "$@"
}

list_video_format_from_json() {
    python <(cat <<"EOPYTHON"
import fileinput
import json

j = json.loads("\n".join(fileinput.input()))

def vformat_sort_key(f):
    if f['vcodec'] == 'none':
        return (-1,)
    def get_score_from_order(needle, best_first):
        if needle in best_first:
            return len(best_first) - best_first.index(needle)
        else:
            return -1
    h = int(f['height'])
    return (
        1,
        ## First choose best resolution
        h if h <= 1440 else -1,
        ## Then best FPS (frame rate)
        int(f['fps']),
        ## Then best codec
        get_score_from_order(
            f['vcodec'].split('.', maxsplit=1)[0],
            ['av01', 'vp9', 'avc1']),
        ## If there is still a draw...
        float(f['tbr']), # higher bit rate is better
    )

#print("\n".join(map(str, sorted(map(vformat_sort_key, j['formats'])))))

for f in sorted(j['formats'], key=vformat_sort_key, reverse=True):
    if f['vcodec'] == 'none':
        continue
    # If we don't have audio in this format, let youtube-dl merge the best audio
    addaudio = '+bestaudio' if f['acodec'] == 'none' else ''
    print('{format_id}{addaudio}: {format} {vcodec}'.format(addaudio=addaudio, **f))
EOPYTHON
            )
}

main() {
    CLIPMENU="${CLIPMENU:-clipmenu}"

    local dl_dir="$default_dl_dir"
    local rofi_args=()
    while (( $# )); do
        case "$1" in
            -h|--help)  usage; exit 0; ;;
            --dl-dir)   dl_dir="$1"; shift; shift; ;;
            --rofi-args)
                shift
                while [[ "$#" -gt 0 && "$1" != "--" ]]; do
                    rofi_args+=("$1")
                    shift
                done
                ;;
            --) shift; break; ;;
            *) break; ;;
        esac
    done

    local mpvargs=( "$@" )

    # Quiet mpv if not in a cli
    [[ -t 0 ]] || mpvargs=( --really-quiet "${mpvargs[@]}" )

    [[ "${#rofi_args[@]}" -gt 0 ]] || rofi_args=( -p "$base0" )

    # rofi-script makes clipmenu list-only entries
    # (we won't get multi-line clips, but don't really care here !?)
    local url=
    CM_LAUNCHER=rofi-script checked "$CLIPMENU" | \
        filter_urls | \
        checked rofi -dmenu "${rofi_args[@]}" | \
        IFS= read -r url
    [[ -n "$url" ]] || fatal "no url selected"

    log "selected url: $url"

    local msg="$(echo "$url" | escape_markup)"
    local do=
    local dummy=
    {
        echo "mpv: play with mpv";
        echo "youtube-dl: download with youtube-dl";
        echo "wget: download with wget";
        echo "mpv-FORMAT: play with mpv";
        echo "youtube-dl-FORMAT: download with youtube-dl";
    } | \
        rofi -dmenu "${rofi_args[@]}" -mesg "$msg" | \
        read -r -d: do dummy

    log "choose: $do"

    local format=""
    if [[ $do =~ .*-FORMAT ]]; then
        log "choosing format"
        msg="Loading youtube-dl format selection..."
        youtube-dl --dump-json "$url" | \
            list_video_format_from_json | \
            tee /dev/fd/2 | \
            rofi -dmenu "${rofi_args[@]}" -mesg "$msg" -async-pre-read 0 | \
            read -r -d: format dummy
        log "choose: $format"
        do="${do%-FORMAT}"
    elif [[ $do = youtube-dl || $do = mpv ]]; then
        log "auto choose best format..."
        youtube-dl --dump-json "$url" | \
            list_video_format_from_json | \
            tee /dev/fd/2 | \
            head -n1 | \
            read -r -d: format dummy
        log "auto choose best format: $format"
    fi

    if [[ $do = youtube-dl || $do = wget ]]; then
        dlwith=$do
        do=

        pushd "$dl_dir" > /dev/null || fatal "invalid dl dir: $dl_dir"

        local filename=
        local markupfilename=
        local ok=0
        if [[ $dlwith = youtube-dl ]]; then
            filename="$(youtube-dl -q --restrict-filenames --get-filename -- "$url" | sanitize_filename)"
            if [[ -n "$filename" ]]; then
                markupfilename="$(echo "$filename" | escape_markup)"
                log "youtube-dl $filename"
                notify low "Launching $dlwith..." "$markupfilename"

                local cmd=( youtube-dl -q -o "${filename//%/%%}" --no-mtime )
                [[ -z "$format" ]] || cmd+=( --format "$format" )
                cmd+=( -- "$url")

                "${cmd[@]}" && ok=1 || err "youtube-dl failed"

                if [[ $ok = 1 && ! -f "$filename" ]]; then
                    ok=0
                    other="$(\ls -t "${filename%\.*}."* | head -n1)"
                    if [[ -f "$other" ]]; then
                        filename="$other"
                        log "youtube-dl output file not found, but found $filename"
                        ok=1
                    else
                        err "youtube-dl output file not found: $filename"
                    fi
                fi

            fi
        else
            filename="$(echo "${url##*/}" | sanitize_filename)"
            markupfilename="$(echo "$filename" | escape_markup)"
            log "wget $filename"
            notify low "Launching $dlwith..." "$markupfilename"

            wget -q -O "$filename" --no-use-server-timestamps -- "$url" && ok=1 || err "wget failed"

            [[ -f "$filename" ]] || ok=0
        fi

        popd > /dev/null

        if [[ $ok = 1 && -n "$filename" ]]; then
            if hash dunstify 2> /dev/null ; then
                local res=
                checked dunstify -a "$base0" -h "string:synchronous:$base0-$LOGPID" -u \
                        normal "Finished $dlwith" "$markupfilename" \
                        -A "default,play mpv"| \
                    read -r res
                if [[ "$res" = "mpv" ]]; then
                    url="$dl_dir/$filename"
                    do=mpv
                fi
            else
                notify normal "Finished $dlwith" "$markupfilename"
            fi

        else
            notify critical "Failed ${dlwith} !" "$markupfilename"
        fi

    fi

    if [[ $do = mpv ]]; then
        local cmd=( mpv "${mpvargs[@]}" )
        [[ -z "$format" ]] || cmd+=( --ytdl-format="$format" )
        cmd+=( "--" "$url" )
        log "launching ${cmd[@]}"
        exec "${cmd[@]}"
    fi

}

main "$@"
