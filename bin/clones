#!/usr/bin/bash

set -euo pipefail

shopt -s extglob

clones_git_root="$HOME/git"

error() {
    echo "clones: error: $*" >&2
}

run() {
    echo "+$(printf ' %q' "$@")" >&2
    "$@"
}

clone() {
    local url="$1"

    local path name link
    path="$url"
    path="${path#http?(s)://}"
    path="${path#git://}"
    path="${path#git@}"
    path="${path##+(/)}"
    path="${path/:/\/}"
    path="${path%.git}"
    path="${path,,}"
    name_parent="${path%/*}"
    name="${path##*/}"
    path="$clones_git_root/$path"

    while true
    do
        link="$clones_git_root/$name"
        if [[ ! -e "$link" ]]
        then
            break
        fi
        link=""
        if [[ -z "${name_parent}" ]]
        then
            echo "warning: all links already exists for $path"
            break
        fi
        echo "warning: $link link already exists to $(readlink -f "$link" ||:)"
        name="$name-${name_parent##*/}"
        name_parent="${name_parent%/*}"
    done

    local cmd
    cmd=(git clone "$url" "$path")
    read -p "${cmd[*]} ? " ans
    case "$ans"
    in
        y|yes) ;;
        *)
            error "aborting"
            exit 1
            ;;
    esac

    run "${cmd[@]}"
    [[ -z "$link" ]] || run ln -sfrT "$path" "$link"
}

list() {
    # /usr/bin/time -v find "$clones_git_root" -name .git -print -prune ||:

#     /usr/bin/time -v perl -MFile::Find -le '
#   sub wanted {
#     if (/^\../) {$File::Find::prune = 1; return}
#     if (-d && -e "$_/.git") {
#        print $File::Find::name; $File::Find::prune = 1
#     }
#   }; find \&wanted, @ARGV' . ||:

#     /usr/bin/time -v python -c '
# import os

# def walk(p):
#     with os.scandir(p) as it:
#         it = list(it)
#         if any(e.name == ".git" for e in it):
#             print(str(p.path))
#             return
#         for e in it:
#             if not e.is_symlink() and e.is_dir():
#                 try:
#                     walk(e)
#                 except PermissionError:
#                     pass

# walk(".")
# ' ||:

    while read -r path
    do
        name="${path#./}"
        url="https://$name"
        path="${clones_git_root/${HOME}\//~\/}/$name"
        echo $path $url
    done < <(cd "$clones_git_root" && perl -MFile::Find -le '
  sub wanted {
    if (/^\../) {$File::Find::prune = 1; return}
    if (-d && -e "$_/.git") {
       print $File::Find::name; $File::Find::prune = 1
    }
  }; find \&wanted, @ARGV' . ||:) | column -t
}

main() {
    case "${1:-}"
    in
        http*|git:*|git@*)
            clone "$1"
            ;;
        ''|list)
            list
            ;;
        *)
            error "unrecognized argument: $1"
            exit 1
            ;;
    esac
}

main "$@"
