#!/usr/bin/ruby

require 'logger'
require 'optparse'

Log = Logger.new(STDERR)
Log.level = Logger::INFO
Log.formatter = proc do |severity, datetime, progname, msg|
  "#{datetime.to_s}:: #{severity} #{msg}\n"
end

TESTMODE = false

current = {}
messages = []
command = false
force_lock = false

OptionParser.new do |opts|

  opts.banner = "Usage: #{$0} -c LOCK_CMD -i IP [-a MSG] [-l MSG]..."

  opts.on('-f', '--force', 'Force exec LOCK_CMD even if error or miss parameter') do |cmd|
    force_lock = true
  end

  opts.on('-c', '--cmd-lock LOCK_CMD', 'Lock command, ie: -c "xtrlock"') do |cmd|
    command = cmd
  end

  opts.on('-i', '--ip IP', 'Ip to match, ie: 192.168.X.X') do |ip|
    if current[:ip]
      messages.push current
      current = {}
    end
    current[:ip] = ip
  end

  opts.on('-l', '--lock MSG', 'Optional locked (away) purple message (default: no message)') do |msg|
    current[:msg_away] = msg
  end

  opts.on('-a', '--avail MSG', 'Optional available purple message (default: no message)') do |msg|
    current[:msg_avail] = msg
  end

  opts.separator ""
  opts.separator "i.e:"
  opts.separator "  #{$0} -c \"xtrlock\" -i 192.168.X.X -l \"locked\" -a \"here\" \\
-i X.X.X.X -a \"everywhere else\" -l \"locked\""
  opts.separator ""

end.parse!

messages.push current if current[:ip]
raise OptionParser::MissingArgument if not command

def cmdexec(cmd)
  Log.debug "Exec cmd \"#{cmd}\""
  return system(cmd);
end
def cmdreturn(cmd)
  Log.debug "Exec return cmd \"#{cmd}\""
  res = `#{cmd}`
  return res
end

PURPLE_STATUS = [ "away", "available" ]
def purple_setstatus(status, message)
  Log.info "Purple set status #{status} \"#{message}\""
  return true if TESTMODE
  cmdexec "purple-remote \"setstatus?status=#{status}&message=#{message}\""
  return $?.exitstatus != 0
end
def purple_getstatus(status, message)
  return "available" if TESTMODE
  res = cmdreturn "purple-remote \"getstatus\""
  return false if $?.exitstatus != 0
  return res.strip
end

begin

  if messages.empty?
    Log.error 'No ip specified'
    raise
  end

  for message in messages
    if not message[:ip]
      Log.error 'Option without IP'
      raise
    end
    message[:re] = Regexp.new(message[:ip].gsub('.', '\\.').gsub('X', '\\d{1,3}'));
  end

  ips = []
  match = false
  `ifconfig`.scan(/inet\s+(?<ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/) do |m|
    for message in messages
      if message[:re].match(m[0])
        ips.push m[0]
        break;
      end
    end
  end

  for message in messages
    for ip in ips
      if message[:re].match(ip)
        match = message;
        break;
      end
    end
    break if match
  end

  if not match
    Log.warn "No match ip found"
  else
    Log.info "ip #{match[:ip]} match"
    purple_setstatus("away", match[:msg_away])
    if command
      Log.info "Exec [command] \"#{command}\""
      cmdexec command if not TESTMODE
    end
    purple_setstatus("available", match[:msg_avail])
  end

rescue
  Log.error 'An error occured'
  if force_lock
    Log.error "Opt [-f] force lock anyway, exec command [#{command}]"
    cmdexec command if not TESTMODE  
  end
end

Log.close
